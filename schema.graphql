type Block @entity {
  id: ID! #id is a required field
  hash: String! @index
  number: Int! @index
  timestamp: Date! @index
  author: String
  specVersion: Int!
  difficulty: String!
  parentHash: String!
  events: [Event] @derivedFrom(field: "block")
  extrinsics: [Extrinsic]! @derivedFrom(field: "block")
}

type Event @entity {
  # BlockHeight-EventId
  id: ID!

  module: String! @index

  event: String! @index

  block: Block!

  blockNumber: Int! @index

  extrinsic: Extrinsic

  phase: Phase!

  #Vec<Hash>
  topics: [String]!

  #parameters: JSON!
  parameters: String!

  timestamp: Date! @index

  relatedAccounts: [String]!
}

type Phase @jsonField {
  isApplyExtrinsic: Boolean!
  isFinalization: Boolean
  isInitialization: Boolean
}

type Extrinsic @entity {
  id: ID!

  module: String! @index

  call: String! @index

  block: Block

  isSuccess: Boolean!

  isSigned: Boolean!

  nonce: Int!

  signature: String

  signatureType: String

  version: Int!

  timestamp: Date! @index

  signer: Account

  # events: [Event] @derivedFrom(field: "extrinsic")

  #   extrinsicV1: ExtrinsicV1 TODO
  #
  #   extrinsicV2: ExtrinsicV2 TODO
  #
  #   extrinsicV3: ExtrinsicV3 TODO
  #
  # TODO, replace back after support union type
  # extra: ExtrinsicExtra
  extra: ExtrinsicV4!
}

type ExtrinsicV4 @jsonField {
  # parameters: JSON!
  parameters: String!

  fee: String! #bigInt TODO json.string unable to serialize a BigInt
  tip: String! #bigInt
  lifetime: [Int]

  # signedExtension: JSONs
  extension: String
}

type Account @entity {
  # Address
  id: ID!

  pubKey: String! @index

  # To get the current balance, get the latest AccountBalanceHistory
  balanceHistory: [AccountBalanceHistory]! @derivedFrom(field: "account")

  nextNonce: Int
}

type AccountBalanceHistory @entity {
  # account_id[-asset_id]
  id: ID!

  account: Account!

  freeAmount: BigInt!

  reservedAmount: BigInt!

  feeFrozen: BigInt!

  miscFrozen: BigInt!

  timestamp: Date! @index
}
